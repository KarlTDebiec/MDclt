Molecular Dynamics Analysis Toolkit README

    Karl Debiec
    karl.t.debiec@gmail.com


This toolkit is a set of functions intended to simplify analysis of molecular
dynamics trajectories. MDAT aims to automate (i.e. hide) tedious steps of
analysis such as looping over multiple files, storing the results in a database,
and splitting calculation across multiple cores. MDAT makes use of external
libraries including h5py, MDAnalysis, and Cython; use of Anaconda is
recommended. Analyses are classified as either primary (of trajectories and
associated logs) and secondary (of primary analyses). The corresponding
functions are analyze_primary and analyze_secondary, and are probably best
explained by example scripts:

    #!/usr/bin/python
    from analysis_toolkit import analyze_primary
    analyze_primary(
        n_cores         = 8,
        hdf5_filename   = "/home/ubiquitin.h5",
        path            = "/home/13-01_01_amber_ubiquitin",
        segment_lister  = "standard_functions.segments_standard",
        analyses        = [("amber.log",
                            {}),
                           ("general.rmsd",
                            {"domain":    "ubiquitin",
                             "selection": "protein and name CA and resid 3:71",
                             "reference": "/home/ubiquitin.pdb"})])

This function call will look at the the trajectory at
'/home/13-01_01_amber_ubiquitin' and use the function
'standard_functions.segments_standard' to list the trajectory segments present.
It will conduct two analyses, the function 'log' in the module 'amber' and the
function 'rmsd' in the module 'general'. 'amber.log' will not be passed any
keyword arguments, while general.rmsd will be provided with 'domain',
'selection', and 'reference' arguments. 'amber.log' parses Amber's log, while
the 'general.rmsd' calculates the RMSD relative to a template. It will first
check '/home/ubiqutin.h5' to see what analyses have been previously completed,
and generate a task list for those that remain. Those tasks will be split
across 8 cores, and the results stored in '/home/ubiquitin.h5'.

    #!/usr/bin/python
    from analysis_toolkit import analyze_secondary
    import numpy
    analyze_secondary(
        n_cores         = 8,
        hdf5_filename   = "/home/ubiquitin.h5",
        analyses        = [("diffusion.rotation",
                            {"domain":     "ubiquitin",
                             "n_vectors":  1000,
                             "tau_finite": numpy.array([1.0, 2.0, 3.0]),
                             "verbose":    True})])

This function call will apply the secondary analysis function 'rotation' from
the module 'diffusion' to the primary data stored in '/home/ubiquitin.h5'. The
keyword arguments 'domain', 'n_vectors', 'tau_finite', and 'verbose' are passed
to the function, and the results stored in '/home/ubiqutin.h5'.

The program presently requires data to be organized as
<SEGMENT_#>/<SEGMENT_#>.*. This is designed to be easily modified by
writing an alternative segment_lister function.
